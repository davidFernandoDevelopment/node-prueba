"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.router=void 0;const express_1=__importDefault(require("express")),medic_usecase_1=require("../application/medic.usecase"),medic_controller_1=require("./medic.controller"),medic_operations_1=require("./medic.operations"),medic_model_1=__importDefault(require("./medic.model")),schema_validator_1=require("../../validators/schema.validator"),medic_schema_1=require("./medic.schema"),mongo_utils_1=require("../../validators/mongo.utils"),yenv_1=__importDefault(require("yenv")),error_helper_1=require("../../helper/error.helper"),env=yenv_1.default(),medicOperations=new medic_operations_1.MedicOperations(medic_model_1.default),medicUseCase=new medic_usecase_1.MedicUseCase(medicOperations),medicController=new medic_controller_1.MedicController(medicUseCase),router=express_1.default.Router();exports.router=router,router.get("/",error_helper_1.Errors.handleError(async(e,r)=>{const o=await medicController.getControllerGeneric({isActive:!0});r.json(o)})),router.get("/:id",error_helper_1.Errors.handleError(async(e,r)=>{const o=e.params.id,a=await medicController.getOneControllerGeneric(o);r.json(a)})),router.post("/",schema_validator_1.SchemaValidator.validate(medic_schema_1.schemas.POST_INSERT),error_helper_1.Errors.handleError(async(e,r)=>{const o=e.body,a=await medicController.insertControllerGeneric(o);r.json(a)})),router.put("/:id",[mongo_utils_1.validarId,schema_validator_1.SchemaValidator.validate(medic_schema_1.schemas.PUT_UPDATE)],error_helper_1.Errors.handleError(async(e,r)=>{const o=e.body,a=e.params.id,t=await medicController.updateControllerGeneric({_id:a},o);r.json(t)})),router.delete("/:id",[mongo_utils_1.validarId],error_helper_1.Errors.handleError(async(e,r)=>{const o=e.params.id,a=await medicController.deleteControllerGeneric(o);r.json(a)})),router.get("/page/:page",schema_validator_1.SchemaValidator.validate(medic_schema_1.schemas.GET_PAGINATION),error_helper_1.Errors.handleError(async(e,r)=>{const o=+e.params.page,a=await medicController.getByPageControllerGeneric({isActive:!1},o,env.PAGINATION);r.json({status:200,results:a})}));